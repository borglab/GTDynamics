name: Python CI

on: [pull_request]

jobs:
  build:
    name: ${{ matrix.name }} ${{ matrix.build_type }} Python ${{ matrix.python_version }}
    runs-on: ${{ matrix.os }}

    env:
      CTEST_OUTPUT_ON_FAILURE: ON
      CTEST_PARALLEL_LEVEL: 2
      CMAKE_BUILD_TYPE: ${{ matrix.build_type }}
      PYTHON_VERSION: ${{ matrix.python_version }} 
      GTSAM_INSTALL_DIR_MACOS: ${{ github.workspace }}/gtsam_install_prefix

    strategy:
      fail-fast: false
      matrix:
        name: [ubuntu-22.04-gcc-9, ubuntu-22.04-clang-12, macOS-14-xcode-15.4]
        build_type: [Debug, Release]
        python_version: [3]
        include:
          - name: ubuntu-22.04-gcc-9
            os: ubuntu-22.04
            compiler: gcc
            version: "9"
          - name: ubuntu-22.04-clang-12
            os: ubuntu-22.04
            compiler: clang
            version: "12"
          - name: macOS-14-xcode-15.4
            os: macOS-14
            compiler: xcode
            version: "15.4"

    steps:
      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y update
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          else
            sudo apt-get install -y clang-${{ matrix.version }} g++-multilib
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          fi
          sudo sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main" > /etc/apt/sources.list.d/gazebo-stable.list'
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys D2486D2DD83DB69272AFE98867170598AF249743
          sudo apt-get -y update
          sudo apt-get -y install libtbb-dev libboost-all-dev libsdformat12-dev

      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            brew install gcc@${{ matrix.version }}
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          else
            sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          fi
          brew install boost
          brew tap osrf/simulation
          brew install sdformat12

      - name: Python Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          pip3 install -U "setuptools<70" wheel numpy pyparsing pyyaml "pybind11-stubgen>=2.5.1"
        
      - name: Python Dependencies and venv Setup (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -e 
          echo "Setting up Python virtual environment on macOS..."
          python${{ env.PYTHON_VERSION }} -m venv venv
          source venv/bin/activate
          echo "VENV_PYTHON_EXECUTABLE=${{ github.workspace }}/venv/bin/python" >> $GITHUB_ENV
          echo "Adding ${{ github.workspace }}/venv/bin to GITHUB_PATH"
          echo "${{ github.workspace }}/venv/bin" >> $GITHUB_PATH
          python -m pip install --upgrade pip
          echo "Installing Python dependencies into venv..."
          python -m pip install --break-system-packages -U "setuptools<70" wheel numpy pyparsing pyyaml "pybind11-stubgen>=2.5.1"

      - name: GTSAM (Linux)
        if: runner.os == 'Linux'
        run: |
          set -e
          git clone https://github.com/borglab/gtsam.git $GITHUB_WORKSPACE/gtsam_source
          cd $GITHUB_WORKSPACE/gtsam_source
          mkdir build && cd $_
          cmake -D GTSAM_BUILD_EXAMPLES_ALWAYS=OFF -DGTSAM_BUILD_PYTHON=ON ..
          sudo make -j$(nproc) install && make python-install
          sudo ldconfig
          cd $GITHUB_WORKSPACE
          sudo rm -rf $GITHUB_WORKSPACE/gtsam_source

      - name: GTSAM (macOS)
        if: runner.os == 'macOS'
        shell: bash 
        run: |
          set -e 
          echo "GTSAM C++ components will be installed to: ${{ env.GTSAM_INSTALL_DIR_MACOS }}"
          echo "GTSAM Python components will be built against Python: ${{ env.VENV_PYTHON_EXECUTABLE }}"
          git clone https://github.com/borglab/gtsam.git /Users/runner/work/gtsam_source 
          cd /Users/runner/work/gtsam_source
          mkdir build && cd $_
          cmake -D GTSAM_BUILD_EXAMPLES_ALWAYS=OFF \
                -D GTSAM_BUILD_PYTHON=ON \
                -D GTSAM_WITH_TBB=OFF \
                -D PYTHON_EXECUTABLE=${{ env.VENV_PYTHON_EXECUTABLE }} \
                -D CMAKE_INSTALL_PREFIX=${{ env.GTSAM_INSTALL_DIR_MACOS }} \
                ..
          make -j$(sysctl -n hw.physicalcpu) install 
          make -j$(sysctl -n hw.physicalcpu) python-install 
          
          echo "DEBUG: Listing contents of GTSAM install directory structure IMMEDIATELY AFTER INSTALL:"
          echo "--- Listing root of install prefix: ${{ env.GTSAM_INSTALL_DIR_MACOS }} ---"
          ls -la ${{ env.GTSAM_INSTALL_DIR_MACOS }} || echo "DEBUG: ls for root prefix failed."
          echo "--- Listing ${{ env.GTSAM_INSTALL_DIR_MACOS }}/lib ---"
          ls -la ${{ env.GTSAM_INSTALL_DIR_MACOS }}/lib || echo "DEBUG: ls for lib failed."
          echo "--- Listing ${{ env.GTSAM_INSTALL_DIR_MACOS }}/lib/cmake (recursive) ---"
          ls -R ${{ env.GTSAM_INSTALL_DIR_MACOS }}/lib/cmake || echo "DEBUG: ls -R for lib/cmake failed."
          
          if [ -d "${{ env.GTSAM_INSTALL_DIR_MACOS }}/lib/cmake/GTSAM" ]; then
            echo "DEBUG: Directory ${{ env.GTSAM_INSTALL_DIR_MACOS }}/lib/cmake/GTSAM FOUND."
          else
            echo "ERROR: Directory ${{ env.GTSAM_INSTALL_DIR_MACOS }}/lib/cmake/GTSAM NOT FOUND immediately after install."
            exit 1 
          fi
          cd $GITHUB_WORKSPACE

      - name: Checkout GTDynamics
        uses: actions/checkout@v4 

      - name: Build Directory for GTDynamics
        run: mkdir build 

      - name: Configure GTDynamics (Linux)
        if: runner.os == 'Linux'
        run: |
          set -e
          cmake -DGTDYNAMICS_BUILD_PYTHON=ON ..
        working-directory: ./build

      - name: Configure GTDynamics (macOS)
        if: runner.os == 'macOS'
        shell: bash 
        run: |
          set -e
          GTSAM_CONFIG_DIR_PATH="${{ env.GTSAM_INSTALL_DIR_MACOS }}/lib/cmake/GTSAM"
          GTSAM_CONFIG_FILE_TO_CHECK="${GTSAM_CONFIG_DIR_PATH}/GTSAMConfig.cmake"

          echo "DEBUG: Verifying GTSAMConfig.cmake for GTDynamics configuration at: ${GTSAM_CONFIG_FILE_TO_CHECK}"
          if [ ! -f "${GTSAM_CONFIG_FILE_TO_CHECK}" ]; then
            echo "ERROR: CRITICAL - GTSAMConfig.cmake NOT FOUND at ${GTSAM_CONFIG_FILE_TO_CHECK} just before GTDynamics configure."
            exit 1 
          fi
          echo "DEBUG: GTSAMConfig.cmake seems to be present for GTDynamics configure."
          
          echo "Configuring GTDynamics with Python: ${{ env.VENV_PYTHON_EXECUTABLE }}"
          echo "Setting GTSAM_DIR to: ${GTSAM_CONFIG_DIR_PATH}"
          echo "Setting CMAKE_PREFIX_PATH to include: ${{ env.GTSAM_INSTALL_DIR_MACOS }} and $(brew --prefix)"
          
          cmake -DGTDYNAMICS_BUILD_PYTHON=ON \
                -DPYTHON_EXECUTABLE=${{ env.VENV_PYTHON_EXECUTABLE }} \
                -DGTSAM_DIR="${GTSAM_CONFIG_DIR_PATH}" \
                -DCMAKE_PREFIX_PATH="${{ env.GTSAM_INSTALL_DIR_MACOS }};$(brew --prefix)" \
                --debug-output \
                ..
        working-directory: ./build

      - name: Build GTDynamics
        run: make -j$(if [[ "$(uname)" == "Darwin" ]]; then sysctl -n hw.physicalcpu; else nproc; fi)
        working-directory: ./build

      - name: Install GTDynamics Python Wrappers
        shell: bash 
        run: |
          set -e
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "Installing GTDynamics Python wrappers into venv (no sudo)"
            make -j$(sysctl -n hw.physicalcpu) python-install
          else
            echo "Installing GTDynamics Python wrappers with sudo"
            sudo make -j$(nproc) python-install
          fi
        working-directory: ./build

      - name: Test GTDynamics Python
        run: make -j$(if [[ "$(uname)" == "Darwin" ]]; then sysctl -n hw.physicalcpu; else nproc; fi) python-test
        working-directory: ./build